[functions]
Random = Random(n = 0)\n\t\n\tReturns a random number\n\n\tint n: the maximal value this function should return\n\n
ClearScreen = ClearScreen()\n\t\n\tClear the screen.\n\n
Beep = Beep(duration)\n\n\tBeeps.\n\n\tint duration: For how long should the brick beeps in milliseconds.\n\n
OnFwd = OnFwd(motor, speed)\n  \n\tSet motor to forward direction and turn it on.\n\t\n\tint motor: motor we want to run.\n\tint speed: speed we want to run the motor at from 0 to 100. Negative value reverses direction.   \n\n
Sensor = Sensor(sensor)\n\t\n\tRead value from given sensor.\n\t\n\tint sensor: sensor we want to read from\n\n
ResetScreen = ResetScreen()\n\n\tReturn the screen to Running... state.\n\n
RectOut = RectOut(x, y, width, height)\n\t\n\tDraw a rectangle from [x, y] with specified width and height.\n\n\tint x: X coordinate of the start point of the rectangle.\n\tint y: Y coordinate of the start point of the rectangle.\n\tint width: The width of the rectangle.\n\tint height: The height of the rectangle.\n\n
SetSensor = SetSensor(sensor, type)
SetSensorLowspeed = SetSensorLowspeed(sensor)
TextOut = TextOut(x, y, text)\n\t\n\tPrint text on the screen.\n\t\n\tint x: X coordinate of the text\n\tint y: Y coordinate or the text\n\tstr text: The text to print\n\n
ClearLine = ClearLine(line)\n\t\n\tClear one line on the screen.\n\t\n\tint line: line we want to clear.\n\n
SensorUS = SensorUS(sensor)\n\n\tRead value from given lowspeed sensor (e.g. Ultrasonic). The input port \n\thas to be configured as a Lowspeed before using this function.\n\t\n\tint sensor: sensor we want to read from\n\n
RotateMotor = RotateMotor(motor, speed, angle)\n\t\n\tRotate motor in specified direction at specified speed for the specified\n\tnumber of degrees.\n\n\tint motor: motor we want to rotate\n\tint speed: speed we want to run the motor at, from 0 to 100. Negative value reverses direction.\n\tint angle: number of degrees we want to rotate the motor. Negative value reverses direction.\n\t\n
Off = Off(motor)\n\t\n\tTurn the motor off (with break).\n\t\n\tint motor: motor we want to stop.\n\n
PlayTone = PlayTone(freq, duration)\n\t\n\tPlay a tone.\n\n\tint freq: Frequency of the tone in Hz.\n\tint duration: For how long should the brick play this tone.\n\n
NumOut = NumOut(x, y, num)\n\t\n\tPrint number on the screen.\n \n\tint x: X coordinate of the text\n\tint y: Y coordinate or the text\n\tint num: The number to print\n\n
LineOut = LineOut(x0, y0, x1, y1)\n\t\n\tDraw a line from [x0, y0] to [x1, y1].\n\n\tint x0: X coordinate of the start point of the line\n\tint y0: Y coordinate of the start point of the line\n\tint x1: X coordinate of the end point of the line\n\tint y1: Y coordinate of the start point of the line\n\n
CircleOut = CircleOut(x, y, radius)\n\n\tDraw a circle with center at [x, y] and specified radius.\n\n\tint x: X coordinate of the center of the circle.\n\tint x: Y coordinate of the center of the circle.\n\tint radius: The radius of the circle.\n\n
MotorTachoCount = MotorTachoCount(motor)\n\t\n\tGet motor tachometer counter value.\n\n\tint motor: motor we want to get tachometer count from.\n\n
SensorHTCompass = SensorHTCompass(sensor)\n\t\n\tRead value from given Compass sensor. Returns deviation from north.\n\n\tint sensor: sensor we want to read from\n\n
PointOut = PointOut(x, y)\n\t\n\tDraw a point on the screen at (x, y)\n\n\tint x: The x coordinate of the point\n\tint y: The y coordinate of the point\n\t\n
SetSensorLight = SetSensorLight(sensor)
SetSensorTouch = SetSensorTouch(sensor)
StopAllTasks = StopAllTasks()\n\n\tStops all running tasks.\n\n
Float = Float(motor)\n\t\n\tKill power for the motor.\n\n\tint motor: motor we want to stop.\n\n
OnRev = OnRev(motor, speed)\n\t\n\tSet motor to reverse direction and turn it on.\n\t\n\tint motor: motor we want to run.\n\tint speed: speed we want to run the motor at from 0 to 100. Negative value reverses direction.\n\n
ResetTachoCount = ResetTachoCount(motor)\n\t\n\tReset tachometer counter. \n\n\tint motor: desired motor output.\n\n
SetSensorType = SetSensorType(sensor, type)
Wait = Wait(milisec)\n\t\n\tWaits for given number of miliseconds.\n\n\tint milisec: number of miliseconds\n\n

