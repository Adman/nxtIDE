[functions]
Random = Random(n = 0)\n\n\tReturns a random number\n\n\tint n: the maximal value this function should return\n\n\t
ClearScreen = ClearScreen()\n\n\tClear the screen.\n\n\t
Beep = Beep(duration)\n\n\tBeeps for a number of miliseconds.\n\n\tint duration: For how long should the brick beeps in milliseconds.\n\n\t
OnFwd = OnFwd(motor, speed)\n\n\tSet motor to forward direction and turn it on.\n\n\tint motor: motor we want to run.  \n\tint speed: speed we want to run the motor at from 0 to 100. Negative \n\t\t\t\t\t  value reverses direction.\n\n\t
Sensor = Sensor(sensor)\n\n\tRead value from given sensor.\n\n\tint sensor: sensor we want to read from\n\n\t
MotorRotationCount = MotorRotationCount(motor)\n\n\tGet motor tachometer counter value.\n\n\tint motor: motor we want to get tachometer count from.\n\n\t
ResetScreen = ResetScreen()\n\n\tReturn the screen to Running... state.\n\n\t
RectOut = RectOut(x, y, width, height)\n\n\tDraw a rectangle from [x, y] with specified width and height.\n\n\tint x: X coordinate of the start point of the rectangle.\n\tint y: Y coordinate of the start point of the rectangle.\n\tint width: The width of the rectangle.\n\tint height: The height of the rectangle.\n\n\t
SensorHTIRSeeker = \n\tSensorHTIRSeeker(sensor, direction, val1, val2, val3, val4, val5)\n\n\tRead value from the HiTechnic IR sensor which can be used to find the IR\n\tball used in RoboCupJunior Soccer competition.\n\n\tint sensor: sensor to read from\n\tint direction: the ball's direction\n\tint val1: value in the first part\n\tint val2: value in the second part\n\tint val3: value in the third part\n\tint val4: value in the fourth part\n\tint val5: value in the fifth part\n\t
SetSensor = SetSensor(sensor, type)
SetSensorLowspeed = SetSensorLowspeed(sensor)
TextOut = TextOut(x, y, text)\n\n\tPrint text on the screen.\n\n\tint x: X coordinate of the text\n\tint y: Y coordinate or the text\n\tstr text: The text to print\n\n\t
ClearLine = ClearLine(line)\n\n\tClear one line on the screen.\n\n\tint line: line we want to clear.\n\n\t
SensorUS = SensorUS(sensor)\n\n\tRead value from given lowspeed sensor (e.g. Ultrasonic). The input port\n\thas to be configured as lowspeed via :func:`api.SetSensorLowspeed` function before \n\tusing this function.\n\n\tint sensor: sensor we want to read from\n\n\t
RotateMotor = RotateMotor(motor, speed, angle)\n\n\tRotate motor in specified direction at specified speed for the specified\n\tnumber of degrees.\n\n\tint motor: motor we want to rotate\n\tint speed: speed we want to run the motor at, from 0 to 100. \n\t\t\t\t\t  Negative value reverses direction.\n\tint angle: number of degrees we want to rotate the motor. Negative \n\t\t\t\t\t  value reverses direction.\n\n\t
Off = Off(motor)\n\n\tTurn the motor off (with break).\n\n\tint motor: motor we want to stop.\n\n\t
PlayTone = PlayTone(freq, duration)\n\n\tPlay a tone.\n\n\tint freq: Frequency of the tone in Hz.\n\tint duration: For how long should the brick play this tone.\n\n\t
NumOut = NumOut(x, y, num)\n\n\tPrint number on the screen.\n\n\tint x: X coordinate of the text\n\tint y: Y coordinate or the text\n\tint num: The number to print\n\n\t
LineOut = LineOut(x0, y0, x1, y1)\n\n\tDraw a line from [x0, y0] to [x1, y1].\n\n\tint x0: X coordinate of the start point of the line\n\tint y0: Y coordinate of the start point of the line\n\tint x1: X coordinate of the end point of the line\n\tint y1: Y coordinate of the start point of the line\n\n\t
CircleOut = CircleOut(x, y, radius)\n\n\tDraw a circle with center at [x, y] and specified radius.\n\n\tint x: X coordinate of the center of the circle.\n\tint y: Y coordinate of the center of the circle.\n\tint radius: The radius of the circle.\n\n\t
MotorTachoCount = MotorTachoCount(motor)\n\n\tGet motor tachometer counter value.\n\n\tint motor: motor we want to get tachometer count from.\n\n\t
SensorHTCompass = SensorHTCompass(sensor)\n\n\tRead value from given Compass sensor. Returns deviation from north.\n\n\tint sensor: sensor we want to read from\n\n\t
PointOut = PointOut(x, y)\n\n\tDraw a point on the screen at (x, y)\n\n\tint x: The x coordinate of the point\n\tint y: The y coordinate of the point\n\n\t
SetSensorLight = SetSensorLight(sensor)
SetSensorTouch = SetSensorTouch(sensor)
StopAllTasks = StopAllTasks()\n\n\tStops all running tasks.\n\n\t
Float = Float(motor)\n\n\tMake the motor float. \n\n\tint motor: motor we want to stop.\n\n\t
OnRev = OnRev(motor, speed)\n\n\tSet motor to reverse direction and turn it on.\n\n\tint motor: motor we want to run.\n\tint speed: speed we want to run the motor at from 0 to 100. Negative \n\t\t\t\t\t  value reverses direction.\n\n\t
ResetTachoCount = ResetTachoCount(motor)\n\n\tReset tachometer counter.\n\n\tint motor: motor we want to reset.\n\n\t
SetSensorType = SetSensorType(sensor, type)
Wait = Wait(milisec)\n\n\tWaits for given number of miliseconds.\n\n\tint milisec: number of miliseconds\n\n\t

